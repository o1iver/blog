<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Recent Blog Posts</title>
  <id>http://blog.o1iver.net/feed.atom</id>
  <updated>2011-11-17T00:00:00Z</updated>
  <link href="http://blog.o1iver.net/" />
  <link href="http://blog.o1iver.net/feed.atom" rel="self" />
  <subtitle type="text">Recent blog posts</subtitle>
  <generator>Werkzeug</generator>
  <entry xml:base="http://blog.o1iver.net/feed.atom">
    <title type="text">Snap Framework Basics</title>
    <id>http://blog.o1iver.net/2011/11/17/snap-framework-basics</id>
    <updated>2011-11-17T00:00:00Z</updated>
    <link href="http://blog.o1iver.net/2011/11/17/snap-framework-basics" />
    <author>
      <name>Oliver Stollmann</name>
    </author>
    <content type="html">&lt;p&gt;I usually develop in Python, although that has more to do with the languages look-and-feel than anything else. After almost ten years of progamming I have come to the conclusion that that is one of the most important aspects of a language. If you like static-typing use something like Java/C#, if you don't use Python or Ruby or whatever else you like. Anyway that doesn't really matter right now (although I might try to write down my thoughts about this some time). The thing is that a few months ago I first had a look at &lt;a class="reference external" href="http://haskell.org"&gt;Haskell&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Haskell is a beauty. If Java is a Volswagen Golf and Python a BMW M3, then Haskell is a Porsche Carrera GT, incredible, but hard to drive. The second I finally understood what Haskell was about, I knew that it was going to become my go-to language in the future (once I get it :-). So after dabbling around for a while I thought it was time to have a look at how suited Haskell is for web development and that is where &lt;a class="reference external" href="http://snapframework.com/"&gt;the Snap Framework&lt;/a&gt; comes into play. From the site:&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Snap is a simple web development framework for unix systems, written in the Haskell programming language. Snap has a high level of test coverage and is well-documented.&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;Installation was very easy:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;cabal install snap
&lt;/pre&gt;&lt;/div&gt;
&lt;p&gt;So below are a few simple examples that I am playing with to get a hang of the framework before I can build a real project with it (already have an idea for that).&lt;/p&gt;
&lt;div class="section" id="getting-the-request-method"&gt;
&lt;h2&gt;Getting the request method&lt;/h2&gt;
&lt;p&gt;The first thing I tried to figure out was how to get information about the request. Here is a request handler that simply prints out a requests HTTP method. With this as a basis it becomes pretty obvious how to extract other information such as the request URI, headers, etc.&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="nf"&gt;methodHandler&lt;/span&gt; &lt;span class="ow"&gt;=&lt;/span&gt; &lt;span class="kr"&gt;do&lt;/span&gt;
    &lt;span class="n"&gt;methodStr&lt;/span&gt; &lt;span class="ow"&gt;&amp;lt;-&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;show&lt;/span&gt; &lt;span class="o"&gt;.&lt;/span&gt; &lt;span class="n"&gt;rqMethod&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt; &lt;span class="o"&gt;&amp;lt;$&amp;gt;&lt;/span&gt; &lt;span class="n"&gt;getRequest&lt;/span&gt;
    &lt;span class="n"&gt;writeBS&lt;/span&gt; &lt;span class="o"&gt;$&lt;/span&gt; &lt;span class="kt"&gt;B&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;pack&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="n"&gt;methodStr&lt;/span&gt; &lt;span class="o"&gt;++&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;&lt;/span&gt;&lt;span class="se"&gt;\n&lt;/span&gt;&lt;span class="sc"&gt;&amp;#39;&lt;/span&gt;&lt;span class="p"&gt;])&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>

