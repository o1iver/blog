<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title type="text">Recent Blog Posts</title>
  <id>http://blog.o1iver.net/feed.atom</id>
  <updated>2011-06-20T00:00:00Z</updated>
  <link href="http://blog.o1iver.net/" />
  <link href="http://blog.o1iver.net/feed.atom" rel="self" />
  <subtitle type="text">Recent blog posts</subtitle>
  <generator>Werkzeug</generator>
  <entry xml:base="http://blog.o1iver.net/feed.atom">
    <title type="text">Software Design Lessons</title>
    <id>http://blog.o1iver.net/2011/6/20/software-design-lessons</id>
    <updated>2011-06-20T00:00:00Z</updated>
    <link href="http://blog.o1iver.net/2011/6/20/software-design-lessons" />
    <author>
      <name>Oliver Stollmann</name>
    </author>
    <content type="html">&lt;div class="section" id="software-design-lessons"&gt;
&lt;h2&gt;Software Design Lessons&lt;/h2&gt;
&lt;p&gt;During my internship at ABB Power Systems I spent most of my time developing an optimization program for a certain type of power plant. The system is a mix of C#/.Net services, VBS scripts and a control/optimization strategy based on a proprietary ABB software package (visual data/control flow programming). There are also operator reports (operator entries, trends, data stores, historical data) produced using a built-in WYSIWYG editor (that produces XHTML/JS). Now I will not go into detail about the actual product, but I thought I would share some of the key things I learnt during this project.&lt;/p&gt;
&lt;div class="section" id="lesson-0-reduce-platform-language-tools-mix"&gt;
&lt;h3&gt;Lesson 0 : Reduce platform/language/tools mix:&lt;/h3&gt;
&lt;p&gt;Building applications that rely on different components, written in different languages, running on different platforms is hard. If you can: avoid that situation. But that is hardly possible now is it? As soon as your application reaches a certain level of complexity or relies on legacy technology, developed decades ago (even if it is still maintained/updated now), you will be faced with this challenge. I guess the real lesson here is not how to deal with legacy systems, but rather that, when you develop applications you should, right from the start, think about how that application will be used years from now, but completely different people, using it to solve problems you didn't know existed when you developed it. Note that there may be situation where it is entirely adequate, if not advantageous, to build on different platforms/languages/tools, but in this case take some time to plan ahead and make your future users happy!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lesson-1-build-your-application-in-a-loosely-coupled-style"&gt;
&lt;h3&gt;Lesson 1: Build your application in a loosely-coupled style&lt;/h3&gt;
&lt;p&gt;Example: persistence; do not build an application that relies on a certain database software (like MSSQL, Oracle, etc). Separate your data model from the rest. This will allow you to change only that part of the application if you decide to change to some other persistence technology.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lesson-2-build-application-interfaces"&gt;
&lt;h3&gt;Lesson 2: Build application interfaces&lt;/h3&gt;
&lt;p&gt;Example: runtime hooks; structure your application in ways that will allow later/external developers to customize the application without access to the application source code. A famous example are Log4J's appenders. Another example would be services that allow you to input/output data in non-standard way; ie. a direct data access interface.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lesson-3-log-log-log-and-finally-log-some-more"&gt;
&lt;h3&gt;Lesson 3: Log, log, log and, finally, log some more&lt;/h3&gt;
&lt;p&gt;As soon as you have to use some third-party software (be it OSS, external, internal, whatever) you will run into trouble. Unless you have incredibly good documentation (not the case with most internally built tools), building systems around legacy software is incredibly hard. You have no idea what is going on. The most simple things could be the cause and you have absolutely no idea what is going on. This is even more the case when error messages look like this: ...Error: FLI-call failed. Could not write data... Logging is easy, developers log everything when they build the application and then usually turn it off for production deployments. Obviously we do not need to see debug logs all the time, but give the user the option to turn very verbose debug logging on. This will save you countless support calls and will make the developer's life much easier. It is also easier to keep your logging up-to-date than your documentation.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lesson-4-provide-serialization-options-based-on-standard-data-exchange-formats"&gt;
&lt;h3&gt;Lesson 4: Provide serialization options based on standard data exchange formats&lt;/h3&gt;
&lt;p&gt;Everything the user enters into/produces with the software, be it complex non-linear control strategies or simple key/value sets, give him/her the option of exporting it. And I don't mean some binary dumps, I am talking about humanly-understandable text-based exports. Let it be XML/JSON/&amp;lt;whatever/&amp;gt; or (if you have to) your own data format. But let it be understandable and text-based. Providing users with some way of exporting/importing this data is invaluable. Nothing is more frustrating than repeating yourself doing dumb things. Make your user happy by letting him programatically create that import file containing 250 OPC signals instead of making him enter each and every one manually. Not only is it much easier and faster, but it is also much safer. The modus operandi here is: keep it as simple as possible, and always text-based.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lesson-5-do-not-rely-on-unique-ids"&gt;
&lt;h3&gt;Lesson 5: Do not rely on unique IDs&lt;/h3&gt;
&lt;p&gt;This is something that makes me incredibly mad. Like insanely smashing-my-fists-on-the-desk mad. DO NOT RELY ON UNIQUE IDs. Who the hell says that they will be unique when you want to transfer something to some other system that may already contain some other items under those IDs. I know merging stuff is hard, but it is easier for the user to change names, than to change strange 38 digit IDs.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lesson-6-make-license-management-painless"&gt;
&lt;h3&gt;Lesson 6: Make license management painless&lt;/h3&gt;
&lt;p&gt;Do no delete a user's data when he/she changes the license. Deactivate! Don't delete! I wouldn't even hide it, just make it unusable (exportable, but unusable in the application itself). Actually, NEVER DELETE ANYTHING. Build in some deactivation logic, but don't delete someone's work under any circumstances. Ok, you don't have to be that extreme, in some cases deleting does make sense, but the motto here is: better safe than sorry.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lesson-7-provide-command-line-tools"&gt;
&lt;h3&gt;Lesson 7: Provide command line tools&lt;/h3&gt;
&lt;p&gt;This ties in a bit with lesson 2. Give user's the possibility of interacting with your application in some programmatic way. This is most important for applications that are themselves developer tools. Developers live (or should live) by the DRY principle: Don't Repeat Yourself! Nothing is more infuriating than repeating yourself over and over again because you cannot create a simple shell script that would take care of all the work in 2 nanoseconds. Time in money!&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="lesson-8-provide-an-option-for-force-override"&gt;
&lt;h3&gt;Lesson 8: Provide an option for force/override&lt;/h3&gt;
&lt;p&gt;If I really want to send that message although the message should only be sent once a day, give me the option to force-send. These options are not going to be used by your application's normal user in a normal situation. But if I am testing the message's receiving server I may very well need to send the message two hundred times per day! Your user is hopefully smart enough to understand the consequences of what he is doing, so let him. Rules are meant to be broken J. This is especially the case when some logic depends on time. Developing a certain application, I once had a server than was running 39 hours ahead of time, because I kept having to fast-forward to the next hour, so that the application would do whatever I wanted it to do. And then guess what: the Oracle database got confused and stuffed everything up!&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="recap"&gt;
&lt;h2&gt;Recap:&lt;/h2&gt;
&lt;ul class="simple"&gt;
&lt;li&gt;&lt;strong&gt;Lesson 1&lt;/strong&gt;: Build your application in a loosely-coupled style&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lesson 2&lt;/strong&gt;: Build application interfaces&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lesson 3&lt;/strong&gt;: Log, log, log and, finally, log some more&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lesson 4&lt;/strong&gt;: Provide serialization options based on standard data exchange formats&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lesson 5&lt;/strong&gt;: Do not rely on unique IDs&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lesson 6&lt;/strong&gt;: Make license management painless&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lesson 7&lt;/strong&gt;: Provide command line tools&lt;/li&gt;
&lt;li&gt;&lt;strong&gt;Lesson 8&lt;/strong&gt;: Provide an option for force/override&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;There is another point which is a bit more general: &lt;strong&gt;error-handling&lt;/strong&gt; and &lt;strong&gt;system state management&lt;/strong&gt;. Those will have to be discussed in another post.&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Disclaimer: The opinions on this blog (http://blog.o1iver.net) are mine (Oliver Stollmann) and only mine and do not in any way reflect the views of my employer (ABB Switzerland).&lt;/em&gt;&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
  <entry xml:base="http://blog.o1iver.net/feed.atom">
    <title type="text">Welcome to the real world</title>
    <id>http://blog.o1iver.net/2011/3/1/welcome-to-the-real-world</id>
    <updated>2011-03-01T00:00:00Z</updated>
    <link href="http://blog.o1iver.net/2011/3/1/welcome-to-the-real-world" />
    <author>
      <name>Oliver Stollmann</name>
    </author>
    <content type="html">&lt;p&gt;&lt;strong&gt;How different is studying and working? Well I am about to find out.&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;About three weeks ago I got an offer to do a three month internship at ABB in Baden Switzerland and today is my first day!&lt;/p&gt;
&lt;p&gt;I am excited, to say the least. After setting three alarms last night I still couldn.t sleep well, waking up several times to check if it wasn.t already too late. I even woke up after dreaming that I had sleept the whole day and it was already Wednesday.&lt;/p&gt;
&lt;p&gt;Thankfully I did wake up at 6.40, albeit quite tired. Then the real fun started: what the hell am I going to wear? I usually couldn.t care less, as people who have seen me in lectures wearing a tracksuit and flip-flops will tell you, but today I ended up trying three different sweaters and even a shirt. In the end I kept it simple, opting for jeans and a t-shirt. Hopefully that isn.t going to backfire. My mum said I should wear slacks and a shirt, but firstly they aren.t as comfortable and secondly I am going to be working as a (wannabe)-engineer and as such hidden somewhere deep inside, miles from any customers.&lt;/p&gt;
&lt;p&gt;Now I am sitting in the train, about to arrive 30 minutes early and psyched as hell. This is after all the first time I will be doing meaningful paid work for a big company and also the first time I will be making enough money to support myself (and that is a great feeling)!&lt;/p&gt;
&lt;p&gt;Let.s see how this goes :-)&lt;/p&gt;
&lt;p&gt;&lt;em&gt;Disclaimer: The opinions on this blog (http://blog.o1iver.net) are mine (Oliver Stollmann) and only mine and do not in any way reflect the views of my new employer (ABB Switzerland).&lt;/em&gt;&lt;/p&gt;
</content>
  </entry>
  <entry xml:base="http://blog.o1iver.net/feed.atom">
    <title type="text">Welcome to the real world, ie. working for ABB</title>
    <id>http://blog.o1iver.net/2011/3/6/welcome-to-the-real-world-working-for-abb</id>
    <updated>2011-03-06T00:00:00Z</updated>
    <link href="http://blog.o1iver.net/2011/3/6/welcome-to-the-real-world-working-for-abb" />
    <author>
      <name>Oliver Stollmann</name>
    </author>
    <content type="html">&lt;div class="section" id="welcome-to-the-real-world-ie-working-for-abb"&gt;
&lt;h2&gt;Welcome to the real world, ie. working for ABB&lt;/h2&gt;
&lt;p&gt;So I have survived my first week in the ...real-world. :-). And surprisingly it wasn.t that bad.&lt;/p&gt;
&lt;p&gt;I am working in a small group of about 12 people, focused on modelling industrial plants and then developing industrial controlling/automation software (which then runs on tiny computers and controller.s cement production plants, nuclear reactors or as in my case Waste-To-Energy incineration plants). The people are super-nice, interesting, very welcoming and very helpful.&lt;/p&gt;
&lt;p&gt;On the first day I was given a desk with a desktop PC running Windows XP and a big 23 inch display (nice :-) ). I was shown where to get (free) coffee. I was given my badge. I must say that I proudly walk around with that badge. I am very proud to work for a company like ABB. They are a global leader in the energy field and I feel honoured to be able to contribute to that, albeit on a tiny-tiny-tiny scale. So what were the surprises?&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="real-useful-work"&gt;
&lt;h2&gt;1). Real useful work&lt;/h2&gt;
&lt;p&gt;From the very first minute I did real work and I don.t mean getting coffee for everybody so that they can do real work better, I really mean real work. I don.t really want to talk in too much depth about what I did (not too sure what the rules about that kind of stuff is), but I can tell you that if I hadn.t done it it would have had to be done by somebody else.&lt;/p&gt;
&lt;p&gt;So the big surprise is that from the first minute on I have only been doing things that are actually going to be used and let me tell you that is both a thrill and a pretty scary thing. I am currently working on a model that will actually be used in real plants and there is constantly a little voice in the back of my head saying: ...if you fuck this up, people may really lose money/get hurt.. But that risk is worth it and I guess that is how the real world works, if you fuck up it will hurt people (emotionally, physically, financially, whatever).&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="luxury-working-conditions"&gt;
&lt;h2&gt;2). Luxury working conditions&lt;/h2&gt;
&lt;p&gt;From the first minute I was impressed by the great working conditions. Free coffee, cheap food, breaks whenever you want, come early/go early, come late/go late, big computer screens (although that is just for developers :-) ).&lt;/p&gt;
&lt;p&gt;I even have a height-adjustable desk. And that is probably one of the most useful office features I have ever seen. Sitting in a chair for 10 hours can make you quite tired/restless, so whenever I feel tired I just get up, press the up button and can then keep working whilst standing up. Something like this:&lt;/p&gt;
&lt;img alt="http://www.interlineuk.com/5011s2006.jpg" src="http://www.interlineuk.com/5011s2006.jpg" style="width: 400px;" /&gt;
&lt;p&gt;Everything is done to allow you to work effectively. When something goes wrong with your computer or the ever-breaking-I-hate-it Lotus Notes, you call tech support and they can access your computer while you watch.&lt;/p&gt;
&lt;p&gt;There are also lots of other things not really worth talking about in detail: printing (with automatic stapling :-)), lockers, etc.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="but-it-is-still-a-huge-company"&gt;
&lt;h2&gt;3). (But it is still a) huge company&lt;/h2&gt;
&lt;p&gt;Although everything is done to enable you to concentrate on working one can still feel that it is a big company.&lt;/p&gt;
&lt;div class="section" id="example-setting-up-email"&gt;
&lt;h3&gt;Example: setting up Email&lt;/h3&gt;
&lt;p&gt;To set-up an email account somebody else must request an account. He then receives an email with some instructions and the second half of the default password. You must then wait for tech support to contact you and set-up the Notus Lotes client. Whilst he does so you have to be there to constantly enter your half of the password when he wants to change settings. So things that could probably be done in 25 seconds with a bash script and Gmail, takes up about 30 minutes of an existing employees time and one hour of mine.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="example-meetings"&gt;
&lt;h3&gt;Example: meetings&lt;/h3&gt;
&lt;p&gt;There are constantly people walking around the place, going from meeting to meeting. This must take up an enormous amount of time. Whenever more than 2-3 people want to discuss something a meeting room is booked, a time set, invitation emails sent you, etc. It seems like an enormous effort for a tiny bit of actually useful work.&lt;/p&gt;
&lt;p&gt;I actually sat in on a meeting on the first day and I could hardly stay awake. I already hate meetings. Although I can imagine that they go quite well there is so much confusion and repetition that it is actually physically painful to watch. Questions and misunderstood, answer misinterpreted, then everything is repeated, minutes are written, etc. big big bureaucracy.&lt;/p&gt;
&lt;p&gt;I am not sure how this problem can be solved, because it is indeed critical for people to meet and discuss issues/projects, but damn does it feel inefficient.&lt;/p&gt;
&lt;/div&gt;
&lt;div class="section" id="example-software"&gt;
&lt;h3&gt;Example: software&lt;/h3&gt;
&lt;p&gt;This is probably the only mind-blowing and very surprising thing that has happened to me so-far. I am currently working with some software that is developed in-house. So I thought that I would be able to install it locally, play around with it, read the user-guide etc. But, alas, no! If I want to use the software locally our department must buy a licence from the unit that produces the software. And I am not talking about 20-200 bucks, this is 5 figures (after company-internally subsidy). Crazy you think? I agree.&lt;/p&gt;
&lt;p&gt;So currently I am working with the software running in a virtual machine off of a USB-hard-drive, because even copying the virtual machine to my local machine would break the licence agreement. I also do not have a user-guide for some reason and getting one seems impossible.&lt;/p&gt;
&lt;p&gt;Although I understand the theory of company-internal competition increasing productivity etc, this goes way over the top. I mean especially software, where distribution costs is zero (copy from a network share and go).&lt;/p&gt;
&lt;/div&gt;
&lt;/div&gt;
&lt;div class="section" id="conclusion"&gt;
&lt;h2&gt;Conclusion:&lt;/h2&gt;
&lt;p&gt;ABB is a great company to work for. Although this may not be the case if feels quite flexible, the working conditions are (mostly) great and you immediately feel useful (most important to me).&lt;/p&gt;
&lt;p&gt;Most importantly the people are great!&lt;/p&gt;
&lt;p&gt;I am happy for now :-)&lt;/p&gt;
&lt;/div&gt;
</content>
  </entry>
</feed>

